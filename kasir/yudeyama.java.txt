import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class YudeYamaGUI extends JFrame {
    private JTextField namaKasirField;
    private JTextArea displayArea;
    private makanan menu;
    private JComboBox<String> appetizerComboBox;
    private JComboBox<String> makananComboBox;
    private JComboBox<String> minumanComboBox;
    private JComboBox<String> dessertComboBox;
    private DefaultListModel<String> selectedItemsModel;
    private JList<String> selectedItemsList;
    private ArrayList<Integer> hargaItemList;
    private JLabel totalHargaLabel;
    private int totalHarga;
    private HashMap<String, Integer> itemQuantities;
    private JComboBox<String> paymentMethodComboBox;

    public YudeYamaGUI() {
        menu = new makanan();
        hargaItemList = new ArrayList<>();
        itemQuantities = new HashMap<>();
        totalHarga = menu.getParkir();

        setTitle("YudeYama Restaurant");
        setSize(1000, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        setExtendedState(JFrame.MAXIMIZED_BOTH);

        JPanel mainPanel = new JPanel(new GridBagLayout()) {
            private Image backgroundImage;

            {
                try {
                    // Periksa apakah file gambar ada di lokasi yang benar
                    File imageFile = new File("restaurant_bar_-_header.png");
                    if (imageFile.exists()) {
                        backgroundImage = ImageIO.read(imageFile);
                    } else {
                        System.out.println("File gambar tidak ditemukan: " + imageFile.getAbsolutePath());
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (backgroundImage != null) {
                    g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
                }
            }
        };

        GridBagConstraints gbc = new GridBagConstraints();
        mainPanel.setBackground(new Color(240, 240, 240));

        JLabel titleLabel = new JLabel("YudeYama Restaurant", JLabel.CENTER);
        titleLabel.setFont(new Font("Times New Roman", Font.BOLD, 26));
        titleLabel.setForeground(Color.WHITE);  // Mengatur warna font menjadi putih
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        mainPanel.add(titleLabel, gbc);

        JPanel cashierPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        cashierPanel.setOpaque(false);
        cashierPanel.add(new JLabel("Nama Kasir:"));
        namaKasirField = new JTextField(20);
        cashierPanel.add(namaKasirField);
        gbc.gridy = 2;
        gbc.gridwidth = 3;
        mainPanel.add(cashierPanel, gbc);

        JPanel menuPanel = new JPanel(new GridLayout(4, 3, 10, 10));
        menuPanel.setBorder(BorderFactory.createTitledBorder("Pilih Menu"));
        menuPanel.setBackground(Color.WHITE);

        appetizerComboBox = new JComboBox<>(getMenuItems(menu.appetizer));
        JButton addAppetizerButton = new JButton("Tambah Appetizer");
        addAppetizerButton.setBackground(Color.GREEN);  // Warna hijau untuk tombol "Tambah Makanan"
        addAppetizerButton.addActionListener(new AddItemListener(menu.appetizer, appetizerComboBox));
        menuPanel.add(new JLabel("Appetizer:"));
        menuPanel.add(appetizerComboBox);
        menuPanel.add(addAppetizerButton);

        makananComboBox = new JComboBox<>(getMenuItems(menu.makanan));
        JButton addMakananButton = new JButton("Tambah Makanan");
        addMakananButton.setBackground(Color.GREEN);  // Warna hijau untuk tombol "Tambah Makanan"
        addMakananButton.addActionListener(new AddItemListener(menu.makanan, makananComboBox));
        menuPanel.add(new JLabel("Makanan:"));
        menuPanel.add(makananComboBox);
        menuPanel.add(addMakananButton);

        minumanComboBox = new JComboBox<>(getMenuItems(menu.minuman));
        JButton addMinumanButton = new JButton("Tambah Minuman");
        addMinumanButton.setBackground(Color.GREEN);  // Warna hijau untuk tombol "Tambah Makanan"
        addMinumanButton.addActionListener(new AddItemListener(menu.minuman, minumanComboBox));
        menuPanel.add(new JLabel("Minuman:"));
        menuPanel.add(minumanComboBox);
        menuPanel.add(addMinumanButton);

        dessertComboBox = new JComboBox<>(getMenuItems(menu.dessert));
        JButton addDessertButton = new JButton("Tambah Dessert");
        addDessertButton.setBackground(Color.GREEN);  // Warna hijau untuk tombol "Tambah Makanan"
        addDessertButton.addActionListener(new AddItemListener(menu.dessert, dessertComboBox));
        menuPanel.add(new JLabel("Dessert:"));
        menuPanel.add(dessertComboBox);
        menuPanel.add(addDessertButton);

        gbc.gridy = 3;
        gbc.gridwidth = 3;
        mainPanel.add(menuPanel, gbc);

        JPanel displayPanel = new JPanel(new BorderLayout());
        displayPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        displayPanel.setBackground(Color.WHITE);

        displayArea = new JTextArea(15, 30);
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        displayPanel.add(scrollPane, BorderLayout.CENTER);

        totalHargaLabel = new JLabel("Total Harga: Rp " + totalHarga);
        JPanel totalPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        totalPanel.add(totalHargaLabel);
        displayPanel.add(totalPanel, BorderLayout.NORTH);

        JButton bayarButton = new JButton("Bayar Sekarang");
        bayarButton.setBackground(Color.BLUE);  // Warna biru untuk tombol "Bayar Sekarang"
        bayarButton.setForeground(Color.WHITE); // Warna font putih
        bayarButton.addActionListener(e -> processPayment());
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(bayarButton);
        displayPanel.add(buttonPanel, BorderLayout.SOUTH);

        JButton printButton = new JButton("Print Nota");
        printButton.setBackground(Color.BLUE);  // Warna biru untuk tombol "Print Nota"
        printButton.setForeground(Color.WHITE); // Warna font putih
        printButton.addActionListener(e -> printReceipt());
        buttonPanel.add(printButton);

        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.gridwidth = 3;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(displayPanel, gbc);

        selectedItemsModel = new DefaultListModel<>();
        selectedItemsList = new JList<>(selectedItemsModel);
        selectedItemsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectedItemsList.setBackground(new Color(255, 255, 204));
        selectedItemsList.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane selectedScrollPane = new JScrollPane(selectedItemsList);

        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.gridheight = 3;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(selectedScrollPane, gbc);

        JPanel paymentPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        paymentPanel.add(new JLabel("Metode Pembayaran:"));
        paymentMethodComboBox = new JComboBox<>(new String[]{"Cash", "Transfer"});
        paymentPanel.add(paymentMethodComboBox);
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 3;
        mainPanel.add(paymentPanel, gbc);

        add(mainPanel, BorderLayout.CENTER);

        JButton exitButton = new JButton("Keluar");
        exitButton.setBackground(Color.RED); // Warna merah untuk tombol "Keluar"
        exitButton.setForeground(Color.WHITE); // Warna font putih
        exitButton.addActionListener(e -> System.exit(0));
        JPanel exitPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        exitPanel.add(exitButton);
        add(exitPanel, BorderLayout.SOUTH);
    }

    private String[] getMenuItems(String[][] menuItems) {
        String[] items = new String[menuItems.length];
        for (int i = 0; i < menuItems.length; i++) {
            items[i] = menuItems[i][0] + " - Rp " + menuItems[i][1];
        }
        return items;
    }

    private class AddItemListener implements ActionListener {
        private String[][] menuItems;
        private JComboBox<String> comboBox;

        public AddItemListener(String[][] menuItems, JComboBox<String> comboBox) {
            this.menuItems = menuItems;
            this.comboBox = comboBox;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int selectedIndex = comboBox.getSelectedIndex();
            if (selectedIndex >= 0) {
                String itemName = menuItems[selectedIndex][0];
                int harga = Integer.parseInt(menuItems[selectedIndex][1]);

                itemQuantities.put(itemName, itemQuantities.getOrDefault(itemName, 0) + 1);

                updateSelectedItemsList();

                hargaItemList.add(harga);
                totalHarga += harga;
                updateTotalHargaLabel();
            }
        }
    }

    private void updateSelectedItemsList() {
        selectedItemsModel.clear();
        for (String item : itemQuantities.keySet()) {
            int quantity = itemQuantities.get(item);
            selectedItemsModel.addElement(item + " (x" + quantity + ")");
        }
    }

    private void updateTotalHargaLabel() {
        totalHargaLabel.setText("Total Harga: Rp " + totalHarga);
    }

    private void processPayment() {
        if (namaKasirField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama kasir harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        String paymentMethod = (String) paymentMethodComboBox.getSelectedItem();
        
        if (paymentMethod.equals("Cash")) {
            String input = JOptionPane.showInputDialog(this, "Masukkan jumlah uang yang dibayarkan:");
            if (input != null && !input.isEmpty()) {
                try {
                    int uangDibayarkan = Integer.parseInt(input);
                    if (uangDibayarkan >= totalHarga) {
                        int kembalian = uangDibayarkan - totalHarga;
                        JOptionPane.showMessageDialog(this, "Pembayaran berhasil! Kembalian: Rp " + kembalian);
                    } else {
                        JOptionPane.showMessageDialog(this, "Uang yang dibayarkan tidak mencukupi!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Input tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pembayaran melalui transfer berhasil!");
        }
    
        StringBuilder receipt = new StringBuilder();
        receipt.append("YudeYama Restaurant\n");
        receipt.append("Nama Kasir: ").append(namaKasirField.getText()).append("\n");
        receipt.append("Metode Pembayaran: ").append(paymentMethod).append("\n\n");
        receipt.append("Daftar Pesanan:\n");
    
        for (String item : itemQuantities.keySet()) {
            int quantity = itemQuantities.get(item);
            receipt.append(item).append(" (x").append(quantity).append(")\n");
        }
    
        receipt.append("\nTotal Harga: Rp ").append(totalHarga).append("\n");
        receipt.append("\nTerimakasih sudah berbelanja di YudeYama Restaurant. Ditunggu kedatangannya kembali! \n");
    
        displayArea.setText(receipt.toString());
    }
    
    private void printReceipt() {
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        printerJob.setPrintable(new Printable() {
            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                if (pageIndex > 0) {
                    return NO_SUCH_PAGE;
                }

                Graphics2D g2d = (Graphics2D) graphics;
                g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

                displayArea.printAll(g2d);
                return PAGE_EXISTS;
            }
        });

        if (printerJob.printDialog()) {
            try {
                printerJob.print();
            } catch (PrinterException ex) {
                JOptionPane.showMessageDialog(this, "Print failed: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            YudeYamaGUI gui = new YudeYamaGUI();
            gui.setVisible(true);
        });
    }
}
